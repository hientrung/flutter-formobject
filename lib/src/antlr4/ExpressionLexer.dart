// Generated from F:\Trung\MyGit\formobject\lib\src\antlr4\Expression.g4 by ANTLR 4.10.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class ExpressionLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.10.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_LBRACKET = 1, TOKEN_RBRACKET = 2, TOKEN_LPAREN = 3, TOKEN_RPAREN = 4, 
    TOKEN_PLUS = 5, TOKEN_MINUS = 6, TOKEN_STAR = 7, TOKEN_DIV = 8, TOKEN_MOD = 9, 
    TOKEN_POW = 10, TOKEN_EQUALS = 11, TOKEN_NOT_EQUALS = 12, TOKEN_LTHAN = 13, 
    TOKEN_LTEQ = 14, TOKEN_GTHAN = 15, TOKEN_GTEQ = 16, TOKEN_AND = 17, 
    TOKEN_OR = 18, TOKEN_NOT = 19, TOKEN_DOT = 20, TOKEN_SHARP = 21, TOKEN_COLON = 22, 
    TOKEN_DBQ = 23, TOKEN_SGQ = 24, TOKEN_QMARK = 25, TOKEN_COUNT = 26, 
    TOKEN_SUM = 27, TOKEN_AVG = 28, TOKEN_EXIST = 29, TOKEN_FIRST = 30, 
    TOKEN_STRING_LITERAL = 31, TOKEN_DATE_LITERAL = 32, TOKEN_NUM_DOUBLE = 33, 
    TOKEN_NUM_INT = 34, TOKEN_TRUE = 35, TOKEN_FALSE = 36, TOKEN_NULL = 37, 
    TOKEN_THIS = 38, TOKEN_IDENTIFIER = 39, TOKEN_WS = 40, TOKEN_NL = 41;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'LBRACKET', 'RBRACKET', 'LPAREN', 'RPAREN', 'PLUS', 'MINUS', 'STAR', 
    'DIV', 'MOD', 'POW', 'EQUALS', 'NOT_EQUALS', 'LTHAN', 'LTEQ', 'GTHAN', 
    'GTEQ', 'AND', 'OR', 'NOT', 'DOT', 'SHARP', 'COLON', 'DBQ', 'SGQ', 'QMARK', 
    'COUNT', 'SUM', 'AVG', 'EXIST', 'FIRST', 'DIGIT', 'HEX', 'EXPONENT', 
    'ESC', 'STRING_LITERAL', 'DATE_LITERAL', 'NUM_DOUBLE', 'NUM_INT', 'TRUE', 
    'FALSE', 'NULL', 'THIS', 'IDENTIFIER', 'WS', 'NL'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'%'", 
      "'^'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
      "'!'", "'.'", "'#'", "':'", "'\"'", "'''", "'?'", "'count'", "'sum'", 
      "'avg'", "'exist'", "'first'", null, null, null, null, "'true'", "'false'", 
      "'null'", "'this'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "PLUS", "MINUS", 
      "STAR", "DIV", "MOD", "POW", "EQUALS", "NOT_EQUALS", "LTHAN", "LTEQ", 
      "GTHAN", "GTEQ", "AND", "OR", "NOT", "DOT", "SHARP", "COLON", "DBQ", 
      "SGQ", "QMARK", "COUNT", "SUM", "AVG", "EXIST", "FIRST", "STRING_LITERAL", 
      "DATE_LITERAL", "NUM_DOUBLE", "NUM_INT", "TRUE", "FALSE", "NULL", 
      "THIS", "IDENTIFIER", "WS", "NL"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  ExpressionLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'Expression.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,41,298,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
      2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,
      40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,1,1,1,1,2,1,2,
      1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
      1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,
      15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,
      1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
      26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
      1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,3,31,178,8,31,1,
      32,1,32,3,32,182,8,32,1,32,4,32,185,8,32,11,32,12,32,186,1,33,1,33,
      1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,200,8,33,3,33,202,
      8,33,1,33,1,33,3,33,206,8,33,3,33,208,8,33,1,34,1,34,1,34,5,34,213,
      8,34,10,34,12,34,216,9,34,1,34,1,34,1,34,1,34,1,34,5,34,223,8,34,10,
      34,12,34,226,9,34,1,34,1,34,3,34,230,8,34,1,35,1,35,4,35,234,8,35,
      11,35,12,35,235,1,35,1,35,1,36,1,36,1,36,4,36,243,8,36,11,36,12,36,
      244,1,36,3,36,248,8,36,1,37,4,37,251,8,37,11,37,12,37,252,1,38,1,38,
      1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,
      40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,280,8,42,10,42,
      12,42,283,9,42,1,43,4,43,286,8,43,11,43,12,43,287,1,43,1,43,1,44,4,
      44,293,8,44,11,44,12,44,294,1,44,1,44,0,0,45,1,1,3,2,5,3,7,4,9,5,11,
      6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
      18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
      29,59,30,61,0,63,0,65,0,67,0,69,31,71,32,73,33,75,34,77,35,79,36,81,
      37,83,38,85,39,87,40,89,41,1,0,11,2,0,65,70,97,102,2,0,69,69,101,101,
      2,0,43,43,45,45,9,0,34,34,39,39,47,47,92,92,98,98,102,102,110,110,
      114,114,116,116,2,0,34,34,92,92,2,0,39,39,92,92,6,0,32,32,43,43,45,
      46,48,58,84,84,90,90,3,0,65,90,95,95,97,122,2,0,65,90,97,122,2,0,9,
      9,32,32,2,0,10,10,13,13,316,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
      7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
      1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
      0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
      0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
      0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
      0,59,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
      77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
      1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,93,1,0,0,0,5,95,1,0,0,0,7,97,1,
      0,0,0,9,99,1,0,0,0,11,101,1,0,0,0,13,103,1,0,0,0,15,105,1,0,0,0,17,
      107,1,0,0,0,19,109,1,0,0,0,21,111,1,0,0,0,23,114,1,0,0,0,25,117,1,
      0,0,0,27,119,1,0,0,0,29,122,1,0,0,0,31,124,1,0,0,0,33,127,1,0,0,0,
      35,130,1,0,0,0,37,133,1,0,0,0,39,135,1,0,0,0,41,137,1,0,0,0,43,139,
      1,0,0,0,45,141,1,0,0,0,47,143,1,0,0,0,49,145,1,0,0,0,51,147,1,0,0,
      0,53,153,1,0,0,0,55,157,1,0,0,0,57,161,1,0,0,0,59,167,1,0,0,0,61,173,
      1,0,0,0,63,177,1,0,0,0,65,179,1,0,0,0,67,188,1,0,0,0,69,229,1,0,0,
      0,71,231,1,0,0,0,73,239,1,0,0,0,75,250,1,0,0,0,77,254,1,0,0,0,79,259,
      1,0,0,0,81,265,1,0,0,0,83,270,1,0,0,0,85,275,1,0,0,0,87,285,1,0,0,
      0,89,292,1,0,0,0,91,92,5,91,0,0,92,2,1,0,0,0,93,94,5,93,0,0,94,4,1,
      0,0,0,95,96,5,40,0,0,96,6,1,0,0,0,97,98,5,41,0,0,98,8,1,0,0,0,99,100,
      5,43,0,0,100,10,1,0,0,0,101,102,5,45,0,0,102,12,1,0,0,0,103,104,5,
      42,0,0,104,14,1,0,0,0,105,106,5,47,0,0,106,16,1,0,0,0,107,108,5,37,
      0,0,108,18,1,0,0,0,109,110,5,94,0,0,110,20,1,0,0,0,111,112,5,61,0,
      0,112,113,5,61,0,0,113,22,1,0,0,0,114,115,5,33,0,0,115,116,5,61,0,
      0,116,24,1,0,0,0,117,118,5,60,0,0,118,26,1,0,0,0,119,120,5,60,0,0,
      120,121,5,61,0,0,121,28,1,0,0,0,122,123,5,62,0,0,123,30,1,0,0,0,124,
      125,5,62,0,0,125,126,5,61,0,0,126,32,1,0,0,0,127,128,5,38,0,0,128,
      129,5,38,0,0,129,34,1,0,0,0,130,131,5,124,0,0,131,132,5,124,0,0,132,
      36,1,0,0,0,133,134,5,33,0,0,134,38,1,0,0,0,135,136,5,46,0,0,136,40,
      1,0,0,0,137,138,5,35,0,0,138,42,1,0,0,0,139,140,5,58,0,0,140,44,1,
      0,0,0,141,142,5,34,0,0,142,46,1,0,0,0,143,144,5,39,0,0,144,48,1,0,
      0,0,145,146,5,63,0,0,146,50,1,0,0,0,147,148,5,99,0,0,148,149,5,111,
      0,0,149,150,5,117,0,0,150,151,5,110,0,0,151,152,5,116,0,0,152,52,1,
      0,0,0,153,154,5,115,0,0,154,155,5,117,0,0,155,156,5,109,0,0,156,54,
      1,0,0,0,157,158,5,97,0,0,158,159,5,118,0,0,159,160,5,103,0,0,160,56,
      1,0,0,0,161,162,5,101,0,0,162,163,5,120,0,0,163,164,5,105,0,0,164,
      165,5,115,0,0,165,166,5,116,0,0,166,58,1,0,0,0,167,168,5,102,0,0,168,
      169,5,105,0,0,169,170,5,114,0,0,170,171,5,115,0,0,171,172,5,116,0,
      0,172,60,1,0,0,0,173,174,2,48,57,0,174,62,1,0,0,0,175,178,3,61,30,
      0,176,178,7,0,0,0,177,175,1,0,0,0,177,176,1,0,0,0,178,64,1,0,0,0,179,
      181,7,1,0,0,180,182,7,2,0,0,181,180,1,0,0,0,181,182,1,0,0,0,182,184,
      1,0,0,0,183,185,2,48,57,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,
      1,0,0,0,186,187,1,0,0,0,187,66,1,0,0,0,188,207,5,92,0,0,189,208,7,
      3,0,0,190,191,5,117,0,0,191,192,3,63,31,0,192,193,3,63,31,0,193,194,
      3,63,31,0,194,195,3,63,31,0,195,208,1,0,0,0,196,201,2,48,51,0,197,
      199,2,48,55,0,198,200,2,48,55,0,199,198,1,0,0,0,199,200,1,0,0,0,200,
      202,1,0,0,0,201,197,1,0,0,0,201,202,1,0,0,0,202,208,1,0,0,0,203,205,
      2,52,57,0,204,206,2,48,55,0,205,204,1,0,0,0,205,206,1,0,0,0,206,208,
      1,0,0,0,207,189,1,0,0,0,207,190,1,0,0,0,207,196,1,0,0,0,207,203,1,
      0,0,0,208,68,1,0,0,0,209,214,3,45,22,0,210,213,8,4,0,0,211,213,3,67,
      33,0,212,210,1,0,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,
      0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,3,45,22,
      0,218,230,1,0,0,0,219,224,3,47,23,0,220,223,8,5,0,0,221,223,3,67,33,
      0,222,220,1,0,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,
      224,225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,3,47,23,0,
      228,230,1,0,0,0,229,209,1,0,0,0,229,219,1,0,0,0,230,70,1,0,0,0,231,
      233,3,41,20,0,232,234,7,6,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,
      233,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,3,41,20,0,238,
      72,1,0,0,0,239,240,3,75,37,0,240,242,3,39,19,0,241,243,3,61,30,0,242,
      241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,
      1,0,0,0,246,248,3,65,32,0,247,246,1,0,0,0,247,248,1,0,0,0,248,74,1,
      0,0,0,249,251,3,61,30,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,
      0,0,0,252,253,1,0,0,0,253,76,1,0,0,0,254,255,5,116,0,0,255,256,5,114,
      0,0,256,257,5,117,0,0,257,258,5,101,0,0,258,78,1,0,0,0,259,260,5,102,
      0,0,260,261,5,97,0,0,261,262,5,108,0,0,262,263,5,115,0,0,263,264,5,
      101,0,0,264,80,1,0,0,0,265,266,5,110,0,0,266,267,5,117,0,0,267,268,
      5,108,0,0,268,269,5,108,0,0,269,82,1,0,0,0,270,271,5,116,0,0,271,272,
      5,104,0,0,272,273,5,105,0,0,273,274,5,115,0,0,274,84,1,0,0,0,275,281,
      7,7,0,0,276,280,7,8,0,0,277,280,3,61,30,0,278,280,5,95,0,0,279,276,
      1,0,0,0,279,277,1,0,0,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,
      0,0,0,281,282,1,0,0,0,282,86,1,0,0,0,283,281,1,0,0,0,284,286,7,9,0,
      0,285,284,1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,
      288,289,1,0,0,0,289,290,6,43,0,0,290,88,1,0,0,0,291,293,7,10,0,0,292,
      291,1,0,0,0,293,294,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,296,
      1,0,0,0,296,297,6,44,0,0,297,90,1,0,0,0,21,0,177,181,186,199,201,205,
      207,212,214,222,224,229,235,244,247,252,279,281,287,294,1,0,1,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}