// Generated from D:\GitHub\flutter-formobject\lib\src\antlr4\Expression.g4 by ANTLR 4.10.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class ExpressionLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.10.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_LBRACKET = 1, TOKEN_RBRACKET = 2, TOKEN_LPAREN = 3, TOKEN_RPAREN = 4, 
    TOKEN_PLUS = 5, TOKEN_MINUS = 6, TOKEN_STAR = 7, TOKEN_DIV = 8, TOKEN_MOD = 9, 
    TOKEN_POW = 10, TOKEN_EQUALS = 11, TOKEN_NOT_EQUALS = 12, TOKEN_LTHAN = 13, 
    TOKEN_LTEQ = 14, TOKEN_GTHAN = 15, TOKEN_GTEQ = 16, TOKEN_AND = 17, 
    TOKEN_OR = 18, TOKEN_NOT = 19, TOKEN_DOT = 20, TOKEN_SHARP = 21, TOKEN_COLON = 22, 
    TOKEN_DBQ = 23, TOKEN_QMARK = 24, TOKEN_STRING_LITERAL = 25, TOKEN_DATE_LITERAL = 26, 
    TOKEN_NUM_DOUBLE = 27, TOKEN_NUM_INT = 28, TOKEN_TRUE = 29, TOKEN_FALSE = 30, 
    TOKEN_NULL = 31, TOKEN_THIS = 32, TOKEN_IDENTIFIER = 33, TOKEN_WS = 34, 
    TOKEN_NL = 35;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'LBRACKET', 'RBRACKET', 'LPAREN', 'RPAREN', 'PLUS', 'MINUS', 'STAR', 
    'DIV', 'MOD', 'POW', 'EQUALS', 'NOT_EQUALS', 'LTHAN', 'LTEQ', 'GTHAN', 
    'GTEQ', 'AND', 'OR', 'NOT', 'DOT', 'SHARP', 'COLON', 'DBQ', 'QMARK', 
    'DIGIT', 'HEX', 'EXPONENT', 'ESC', 'STRING_LITERAL', 'DATE_LITERAL', 
    'NUM_DOUBLE', 'NUM_INT', 'TRUE', 'FALSE', 'NULL', 'THIS', 'IDENTIFIER', 
    'WS', 'NL'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'%'", 
      "'^'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
      "'!'", "'.'", "'#'", "':'", "'\"'", "'?'", null, null, null, null, 
      "'true'", "'false'", "'null'", "'this'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "PLUS", "MINUS", 
      "STAR", "DIV", "MOD", "POW", "EQUALS", "NOT_EQUALS", "LTHAN", "LTEQ", 
      "GTHAN", "GTEQ", "AND", "OR", "NOT", "DOT", "SHARP", "COLON", "DBQ", 
      "QMARK", "STRING_LITERAL", "DATE_LITERAL", "NUM_DOUBLE", "NUM_INT", 
      "TRUE", "FALSE", "NULL", "THIS", "IDENTIFIER", "WS", "NL"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  ExpressionLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'Expression.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,35,246,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
      2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,1,1,1,
      1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,
      10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,
      1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,
      20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,3,25,138,8,25,
      1,26,1,26,3,26,142,8,26,1,26,4,26,145,8,26,11,26,12,26,146,1,27,1,
      27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,160,8,27,3,27,
      162,8,27,1,27,1,27,3,27,166,8,27,3,27,168,8,27,1,28,1,28,1,28,5,28,
      173,8,28,10,28,12,28,176,9,28,1,28,1,28,1,29,1,29,4,29,182,8,29,11,
      29,12,29,183,1,29,1,29,1,30,1,30,1,30,4,30,191,8,30,11,30,12,30,192,
      1,30,3,30,196,8,30,1,31,4,31,199,8,31,11,31,12,31,200,1,32,1,32,1,
      32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
      1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,228,8,36,10,36,12,
      36,231,9,36,1,37,4,37,234,8,37,11,37,12,37,235,1,37,1,37,1,38,4,38,
      241,8,38,11,38,12,38,242,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,
      13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
      18,37,19,39,20,41,21,43,22,45,23,47,24,49,0,51,0,53,0,55,0,57,25,59,
      26,61,27,63,28,65,29,67,30,69,31,71,32,73,33,75,34,77,35,1,0,10,2,
      0,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,9,0,34,34,39,39,47,
      47,92,92,98,98,102,102,110,110,114,114,116,116,2,0,34,34,92,92,6,0,
      32,32,43,43,45,46,48,58,84,84,90,90,3,0,65,90,95,95,97,122,2,0,65,
      90,97,122,2,0,9,9,32,32,2,0,10,10,13,13,261,0,1,1,0,0,0,0,3,1,0,0,
      0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
      15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
      1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
      0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
      0,0,0,47,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
      0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
      0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,
      85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,
      17,95,1,0,0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,102,1,0,0,0,25,105,1,
      0,0,0,27,107,1,0,0,0,29,110,1,0,0,0,31,112,1,0,0,0,33,115,1,0,0,0,
      35,118,1,0,0,0,37,121,1,0,0,0,39,123,1,0,0,0,41,125,1,0,0,0,43,127,
      1,0,0,0,45,129,1,0,0,0,47,131,1,0,0,0,49,133,1,0,0,0,51,137,1,0,0,
      0,53,139,1,0,0,0,55,148,1,0,0,0,57,169,1,0,0,0,59,179,1,0,0,0,61,187,
      1,0,0,0,63,198,1,0,0,0,65,202,1,0,0,0,67,207,1,0,0,0,69,213,1,0,0,
      0,71,218,1,0,0,0,73,223,1,0,0,0,75,233,1,0,0,0,77,240,1,0,0,0,79,80,
      5,91,0,0,80,2,1,0,0,0,81,82,5,93,0,0,82,4,1,0,0,0,83,84,5,40,0,0,84,
      6,1,0,0,0,85,86,5,41,0,0,86,8,1,0,0,0,87,88,5,43,0,0,88,10,1,0,0,0,
      89,90,5,45,0,0,90,12,1,0,0,0,91,92,5,42,0,0,92,14,1,0,0,0,93,94,5,
      47,0,0,94,16,1,0,0,0,95,96,5,37,0,0,96,18,1,0,0,0,97,98,5,94,0,0,98,
      20,1,0,0,0,99,100,5,61,0,0,100,101,5,61,0,0,101,22,1,0,0,0,102,103,
      5,33,0,0,103,104,5,61,0,0,104,24,1,0,0,0,105,106,5,60,0,0,106,26,1,
      0,0,0,107,108,5,60,0,0,108,109,5,61,0,0,109,28,1,0,0,0,110,111,5,62,
      0,0,111,30,1,0,0,0,112,113,5,62,0,0,113,114,5,61,0,0,114,32,1,0,0,
      0,115,116,5,38,0,0,116,117,5,38,0,0,117,34,1,0,0,0,118,119,5,124,0,
      0,119,120,5,124,0,0,120,36,1,0,0,0,121,122,5,33,0,0,122,38,1,0,0,0,
      123,124,5,46,0,0,124,40,1,0,0,0,125,126,5,35,0,0,126,42,1,0,0,0,127,
      128,5,58,0,0,128,44,1,0,0,0,129,130,5,34,0,0,130,46,1,0,0,0,131,132,
      5,63,0,0,132,48,1,0,0,0,133,134,2,48,57,0,134,50,1,0,0,0,135,138,3,
      49,24,0,136,138,7,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,52,1,0,
      0,0,139,141,7,1,0,0,140,142,7,2,0,0,141,140,1,0,0,0,141,142,1,0,0,
      0,142,144,1,0,0,0,143,145,2,48,57,0,144,143,1,0,0,0,145,146,1,0,0,
      0,146,144,1,0,0,0,146,147,1,0,0,0,147,54,1,0,0,0,148,167,5,92,0,0,
      149,168,7,3,0,0,150,151,5,117,0,0,151,152,3,51,25,0,152,153,3,51,25,
      0,153,154,3,51,25,0,154,155,3,51,25,0,155,168,1,0,0,0,156,161,2,48,
      51,0,157,159,2,48,55,0,158,160,2,48,55,0,159,158,1,0,0,0,159,160,1,
      0,0,0,160,162,1,0,0,0,161,157,1,0,0,0,161,162,1,0,0,0,162,168,1,0,
      0,0,163,165,2,52,57,0,164,166,2,48,55,0,165,164,1,0,0,0,165,166,1,
      0,0,0,166,168,1,0,0,0,167,149,1,0,0,0,167,150,1,0,0,0,167,156,1,0,
      0,0,167,163,1,0,0,0,168,56,1,0,0,0,169,174,3,45,22,0,170,173,8,4,0,
      0,171,173,3,55,27,0,172,170,1,0,0,0,172,171,1,0,0,0,173,176,1,0,0,
      0,174,172,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,
      177,178,3,45,22,0,178,58,1,0,0,0,179,181,3,41,20,0,180,182,7,5,0,0,
      181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,
      185,1,0,0,0,185,186,3,41,20,0,186,60,1,0,0,0,187,188,3,63,31,0,188,
      190,3,39,19,0,189,191,3,49,24,0,190,189,1,0,0,0,191,192,1,0,0,0,192,
      190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,196,3,53,26,0,195,
      194,1,0,0,0,195,196,1,0,0,0,196,62,1,0,0,0,197,199,3,49,24,0,198,197,
      1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,64,1,0,
      0,0,202,203,5,116,0,0,203,204,5,114,0,0,204,205,5,117,0,0,205,206,
      5,101,0,0,206,66,1,0,0,0,207,208,5,102,0,0,208,209,5,97,0,0,209,210,
      5,108,0,0,210,211,5,115,0,0,211,212,5,101,0,0,212,68,1,0,0,0,213,214,
      5,110,0,0,214,215,5,117,0,0,215,216,5,108,0,0,216,217,5,108,0,0,217,
      70,1,0,0,0,218,219,5,116,0,0,219,220,5,104,0,0,220,221,5,105,0,0,221,
      222,5,115,0,0,222,72,1,0,0,0,223,229,7,6,0,0,224,228,7,7,0,0,225,228,
      3,49,24,0,226,228,5,95,0,0,227,224,1,0,0,0,227,225,1,0,0,0,227,226,
      1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,74,1,0,
      0,0,231,229,1,0,0,0,232,234,7,8,0,0,233,232,1,0,0,0,234,235,1,0,0,
      0,235,233,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,6,37,0,0,
      238,76,1,0,0,0,239,241,7,9,0,0,240,239,1,0,0,0,241,242,1,0,0,0,242,
      240,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,245,6,38,0,0,245,78,
      1,0,0,0,18,0,137,141,146,159,161,165,167,172,174,183,192,195,200,227,
      229,235,242,1,0,1,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}